//===========================================================
// initial schema setup
//===========================================================
// schema
CREATE SCHEMA IF NOT EXISTS FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE;

// warehouse metering history
CREATE TABLE IF NOT EXISTS 
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.WAREHOUSE_METERING_HISTORY
AS (
  SELECT
    START_TIME,
    END_TIME,
    WAREHOUSE_ID,
    WAREHOUSE_NAME,
    CREDITS_USED,
    CREDITS_USED_COMPUTE,
    CREDITS_USED_CLOUD_SERVICES,
    CURRENT_TIMESTAMP AS INGESTION_TIME
  FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
);

// snowpipe history
CREATE TABLE IF NOT EXISTS 
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.SNOWPIPES
AS (
  SELECT
    PIPE_ID,
    PIPE_NAME,
    PIPE_SCHEMA_ID,
    PIPE_SCHEMA,
    PIPE_CATALOG_ID,
    PIPE_CATALOG,
    IS_AUTOINGEST_ENABLED,
    NOTIFICATION_CHANNEL_NAME,
    PIPE_OWNER,
    DEFINITION,
    CREATED,
    LAST_ALTERED,
    COMMENT,
    DELETED,
    CURRENT_TIMESTAMP AS INGESTION_TIME
  FROM
    SNOWFLAKE.ACCOUNT_USAGE.PIPES
);

// snowpipe usage history
CREATE TABLE IF NOT EXISTS 
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.SNOWPIPE_USAGE_HISTORY
AS (
  SELECT
    PIPE_ID,
    PIPE_NAME,
    START_TIME,
    END_TIME,
    CREDITS_USED,
    BYTES_INSERTED,
    FILES_INSERTED,
    CURRENT_TIMESTAMP AS INGESTION_TIME
  FROM
    SNOWFLAKE.ACCOUNT_USAGE.PIPE_USAGE_HISTORY
);

// query history
CREATE TABLE IF NOT EXISTS 
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.QUERY_HISTORY
AS (
  SELECT
    QUERY_ID,
    QUERY_TEXT,
    DATABASE_ID,
    DATABASE_NAME,
    SCHEMA_ID,
    SCHEMA_NAME,
    QUERY_TYPE,
    SESSION_ID,
    USER_NAME,
    ROLE_NAME,
    WAREHOUSE_ID,
    WAREHOUSE_NAME,
    WAREHOUSE_SIZE,
    WAREHOUSE_TYPE,
    CLUSTER_NUMBER,
    QUERY_TAG,
    EXECUTION_STATUS,
    ERROR_CODE,
    ERROR_MESSAGE,
    START_TIME,
    END_TIME,
    TOTAL_ELAPSED_TIME,
    BYTES_SCANNED,
    PERCENTAGE_SCANNED_FROM_CACHE,
    BYTES_WRITTEN,
    BYTES_WRITTEN_TO_RESULT,
    BYTES_READ_FROM_RESULT,
    ROWS_PRODUCED,
    ROWS_INSERTED,
    ROWS_UPDATED,
    ROWS_DELETED,
    ROWS_UNLOADED,
    BYTES_DELETED,
    PARTITIONS_SCANNED,
    PARTITIONS_TOTAL,
    BYTES_SPILLED_TO_LOCAL_STORAGE,
    BYTES_SPILLED_TO_REMOTE_STORAGE,
    BYTES_SENT_OVER_THE_NETWORK,
    COMPILATION_TIME,
    EXECUTION_TIME,
    QUEUED_PROVISIONING_TIME,
    QUEUED_REPAIR_TIME,
    QUEUED_OVERLOAD_TIME,
    TRANSACTION_BLOCKED_TIME,
    OUTBOUND_DATA_TRANSFER_CLOUD,
    OUTBOUND_DATA_TRANSFER_REGION,
    OUTBOUND_DATA_TRANSFER_BYTES,
    INBOUND_DATA_TRANSFER_CLOUD,
    INBOUND_DATA_TRANSFER_REGION,
    INBOUND_DATA_TRANSFER_BYTES,
    LIST_EXTERNAL_FILES_TIME,
    CREDITS_USED_CLOUD_SERVICES,
    CURRENT_TIMESTAMP AS INGESTION_TIME
  FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
);

// Tasks history
CREATE TABLE IF NOT EXISTS 
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.TASKS (
    CREATED_ON TIMESTAMP_LTZ,
    NAME STRING,
    DATABASE_NAME STRING,
    SCHEMA_NAME STRING,
    OWNER STRING,
    COMMENT STRING,
    WAREHOUSE STRING,
    SCHEDULE STRING,
    PREDECESSOR STRING,
    STATE STRING,
    DEFINITION STRING,
    CONDITION STRING,
    INGESTION_TIME TIMESTAMP_LTZ
);

// Task usage history
CREATE TABLE IF NOT EXISTS
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.TASK_USAGE_HISTORY(
    QUERY_ID STRING,
    NAME STRING,
    DATABASE_NAME STRING,
    SCHEMA_NAME STRING,
    QUERY_TEXT STRING,
    CONDITION_TEXT STRING,
    STATE STRING,
    ERROR_CODE STRING,
    ERROR_MESSAGE STRING,
    SCHEDULED_TIME TIMESTAMP_LTZ,
    QUERY_START_TIME TIMESTAMP_LTZ,
    NEXT_SCHEDULED_TIME TIMESTAMP_LTZ,
    COMPLETED_TIME TIMESTAMP_LTZ,
    ROOT_TASK_ID STRING,
    GRAPH_VERSION NUMBER,
    RUN_ID NUMBER,
    RETURN_VALUE STRING,
    INGESTION_TIME TIMESTAMP_LTZ
  );

//===========================================================



//===========================================================
// account_usage cdc and snapshotting
//===========================================================
// warehouse metering history
SET CURSOR = (SELECT COALESCE(MAX(START_TIME), 0::TIMESTAMP_LTZ) FROM FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.WAREHOUSE_METERING_HISTORY);

INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.WAREHOUSE_METERING_HISTORY
SELECT
  START_TIME,
  END_TIME,
  WAREHOUSE_ID,
  WAREHOUSE_NAME,
  CREDITS_USED,
  CREDITS_USED_COMPUTE,
  CREDITS_USED_CLOUD_SERVICES,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM
  SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
  START_TIME > $CURSOR;

// snowpipe history
INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.SNOWPIPES
SELECT
  PIPE_ID,
  PIPE_NAME,
  PIPE_SCHEMA_ID,
  PIPE_SCHEMA,
  PIPE_CATALOG_ID,
  PIPE_CATALOG,
  IS_AUTOINGEST_ENABLED,
  NOTIFICATION_CHANNEL_NAME,
  PIPE_OWNER,
  DEFINITION,
  CREATED,
  LAST_ALTERED,
  COMMENT,
  DELETED,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM
  SNOWFLAKE.ACCOUNT_USAGE.PIPES;

// snowpipe usage history
SET CURSOR = (SELECT COALESCE(MAX(END_TIME), 0::TIMESTAMP_LTZ) FROM FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.SNOWPIPE_USAGE_HISTORY);

INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.SNOWPIPE_USAGE_HISTORY
SELECT
  PIPE_ID,
  PIPE_NAME,
  START_TIME,
  END_TIME,
  CREDITS_USED,
  BYTES_INSERTED,
  FILES_INSERTED,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM
  SNOWFLAKE.ACCOUNT_USAGE.PIPE_USAGE_HISTORY
WHERE
  END_TIME > $CURSOR;

// query history
SET CURSOR = (SELECT COALESCE(MAX(END_TIME), 0::TIMESTAMP_LTZ) FROM FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.QUERY_HISTORY);

INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.QUERY_HISTORY
SELECT
  QUERY_ID,
  QUERY_TEXT,
  DATABASE_ID,
  DATABASE_NAME,
  SCHEMA_ID,
  SCHEMA_NAME,
  QUERY_TYPE,
  SESSION_ID,
  USER_NAME,
  ROLE_NAME,
  WAREHOUSE_ID,
  WAREHOUSE_NAME,
  WAREHOUSE_SIZE,
  WAREHOUSE_TYPE,
  CLUSTER_NUMBER,
  QUERY_TAG,
  EXECUTION_STATUS,
  ERROR_CODE,
  ERROR_MESSAGE,
  START_TIME,
  END_TIME,
  TOTAL_ELAPSED_TIME,
  BYTES_SCANNED,
  PERCENTAGE_SCANNED_FROM_CACHE,
  BYTES_WRITTEN,
  BYTES_WRITTEN_TO_RESULT,
  BYTES_READ_FROM_RESULT,
  ROWS_PRODUCED,
  ROWS_INSERTED,
  ROWS_UPDATED,
  ROWS_DELETED,
  ROWS_UNLOADED,
  BYTES_DELETED,
  PARTITIONS_SCANNED,
  PARTITIONS_TOTAL,
  BYTES_SPILLED_TO_LOCAL_STORAGE,
  BYTES_SPILLED_TO_REMOTE_STORAGE,
  BYTES_SENT_OVER_THE_NETWORK,
  COMPILATION_TIME,
  EXECUTION_TIME,
  QUEUED_PROVISIONING_TIME,
  QUEUED_REPAIR_TIME,
  QUEUED_OVERLOAD_TIME,
  TRANSACTION_BLOCKED_TIME,
  OUTBOUND_DATA_TRANSFER_CLOUD,
  OUTBOUND_DATA_TRANSFER_REGION,
  OUTBOUND_DATA_TRANSFER_BYTES,
  INBOUND_DATA_TRANSFER_CLOUD,
  INBOUND_DATA_TRANSFER_REGION,
  INBOUND_DATA_TRANSFER_BYTES,
  LIST_EXTERNAL_FILES_TIME,
  CREDITS_USED_CLOUD_SERVICES,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM
  SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
  END_TIME > $CURSOR;

//===========================================================



//===========================================================
// tasks cdc and snapshotting with SYSADMIN
//===========================================================
// needed to monitor tasks as snowflake somehow does not have a MONITOR permission for tasks.
USE ROLE SYSADMIN; 

// Snapshot tasks for task_history
// no task inventory table exists, so this is called for a subsequent RESULT_SCAN call
SHOW TASKS IN ACCOUNT;

INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.TASKS 
SELECT 
  "created_on" AS CREATED_ON,
  "name" AS NAME,
  "database_name" AS DATABASE_NAME,
  "schema_name" AS SCHEMA_NAME,
  "owner" AS OWNER,
  "comment" AS COMMENT,
  "warehouse" AS WAREHOUSE,
  "schedule" AS SCHEDULE,
  "predecessor" AS PREDECESSOR,
  "state" AS STATE,
  "definition" AS DEFINITION,
  "condition" AS CONDITION,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM 
  TABLE(RESULT_SCAN(LAST_QUERY_ID())); 

// Task usage history
SET CURSOR = (SELECT COALESCE(MAX(COMPLETED_TIME), 0::TIMESTAMP_LTZ) FROM FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.TASK_USAGE_HISTORY);

INSERT INTO  
  FIVETRAN_DB.HASHMAP_SNOWFLAKE_USAGE.TASK_USAGE_HISTORY
SELECT
  QUERY_ID,
  NAME,
  DATABASE_NAME,
  SCHEMA_NAME,
  QUERY_TEXT,
  CONDITION_TEXT,
  STATE,
  ERROR_CODE,
  ERROR_MESSAGE,
  SCHEDULED_TIME,
  QUERY_START_TIME,
  NEXT_SCHEDULED_TIME,
  COMPLETED_TIME,
  ROOT_TASK_ID,
  GRAPH_VERSION,
  RUN_ID,
  RETURN_VALUE,
  CURRENT_TIMESTAMP AS INGESTION_TIME
FROM
  TABLE(SNOWFLAKE.INFORMATION_SCHEMA.TASK_HISTORY())
WHERE
  COMPLETED_TIME > $CURSOR;

//===========================================================



